//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JKApi.Data.MasterDB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class JKControlMasterEntities : DbContext
    {
        public JKControlMasterEntities()
            : base("name=JKControlMasterEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetransUserClaim> AspNetransUserClaims { get; set; }
        public virtual DbSet<AspNetransUserLogin> AspNetransUserLogins { get; set; }
        public virtual DbSet<AspNetransUser> AspNetransUsers { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<mstrMenu> mstrMenus { get; set; }
        public virtual DbSet<mstrRegion> mstrRegions { get; set; }
        public virtual DbSet<mstrRole> mstrRoles { get; set; }
        public virtual DbSet<mstrRolebasedMenuAccess> mstrRolebasedMenuAccesses { get; set; }
        public virtual DbSet<mstrRoleType> mstrRoleTypes { get; set; }
        public virtual DbSet<transIPAddress> transIPAddresses { get; set; }
        public virtual DbSet<transLoginTracking> transLoginTrackings { get; set; }
        public virtual DbSet<transNLog> transNLogs { get; set; }
        public virtual DbSet<transUser> transUsers { get; set; }
        public virtual DbSet<transUserRegionMapping> transUserRegionMappings { get; set; }
        public virtual DbSet<transUserRoleMapping> transUserRoleMappings { get; set; }
        public virtual DbSet<ELMAH_Error> ELMAH_Error { get; set; }
        public virtual DbSet<hisIPAddress> hisIPAddresses { get; set; }
        public virtual DbSet<hisMenu> hisMenus { get; set; }
        public virtual DbSet<hisRoleBasedMenuAccess> hisRoleBasedMenuAccesses { get; set; }
        public virtual DbSet<hisUser> hisUsers { get; set; }
        public virtual DbSet<hisUserRegionMapping> hisUserRegionMappings { get; set; }
        public virtual DbSet<hisUserRoleMapping> hisUserRoleMappings { get; set; }
        public virtual DbSet<appSysCPI> appSysCPIs { get; set; }
        public virtual DbSet<appSysStatu> appSysStatus { get; set; }
    
        [DbFunction("JKControlMasterEntities", "ufnSplit")]
        public virtual IQueryable<ufnSplit_Result> ufnSplit(string @string)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("string", @string) :
                new ObjectParameter("string", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufnSplit_Result>("[JKControlMasterEntities].[ufnSplit](@string)", stringParameter);
        }
    
        public virtual int admin_AddOrUpdateUserDetails(Nullable<int> userId, string userName, string password, string firstName, string lastName, string email, string phone, string addres, string city, string state, string zipcode, Nullable<bool> isEnable, Nullable<int> createdBy, string regionIds, string roleIds, ObjectParameter errorCode, ObjectParameter errorMessage)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addresParameter = addres != null ?
                new ObjectParameter("Addres", addres) :
                new ObjectParameter("Addres", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipcodeParameter = zipcode != null ?
                new ObjectParameter("Zipcode", zipcode) :
                new ObjectParameter("Zipcode", typeof(string));
    
            var isEnableParameter = isEnable.HasValue ?
                new ObjectParameter("IsEnable", isEnable) :
                new ObjectParameter("IsEnable", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var regionIdsParameter = regionIds != null ?
                new ObjectParameter("RegionIds", regionIds) :
                new ObjectParameter("RegionIds", typeof(string));
    
            var roleIdsParameter = roleIds != null ?
                new ObjectParameter("RoleIds", roleIds) :
                new ObjectParameter("RoleIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("admin_AddOrUpdateUserDetails", userIdParameter, userNameParameter, passwordParameter, firstNameParameter, lastNameParameter, emailParameter, phoneParameter, addresParameter, cityParameter, stateParameter, zipcodeParameter, isEnableParameter, createdByParameter, regionIdsParameter, roleIdsParameter, errorCode, errorMessage);
        }
    
        public virtual int admin_InsertHistory(Nullable<int> rowId, string history_Table, string main_Table, ObjectParameter errorCode, ObjectParameter errorMessage)
        {
            var rowIdParameter = rowId.HasValue ?
                new ObjectParameter("RowId", rowId) :
                new ObjectParameter("RowId", typeof(int));
    
            var history_TableParameter = history_Table != null ?
                new ObjectParameter("History_Table", history_Table) :
                new ObjectParameter("History_Table", typeof(string));
    
            var main_TableParameter = main_Table != null ?
                new ObjectParameter("Main_Table", main_Table) :
                new ObjectParameter("Main_Table", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("admin_InsertHistory", rowIdParameter, history_TableParameter, main_TableParameter, errorCode, errorMessage);
        }
    
        public virtual int admin_UserDelete(Nullable<int> userId, Nullable<bool> isEnable, Nullable<bool> isDelete, Nullable<int> createdBy, ObjectParameter errorCode, ObjectParameter errorMessage)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isEnableParameter = isEnable.HasValue ?
                new ObjectParameter("IsEnable", isEnable) :
                new ObjectParameter("IsEnable", typeof(bool));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("admin_UserDelete", userIdParameter, isEnableParameter, isDeleteParameter, createdByParameter, errorCode, errorMessage);
        }
    
        public virtual ObjectResult<admin_UserLogin_Result> admin_UserLogin(string username, string password, string iPAddress, ObjectParameter errorCode, ObjectParameter errorMessage)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<admin_UserLogin_Result>("admin_UserLogin", usernameParameter, passwordParameter, iPAddressParameter, errorCode, errorMessage);
        }
    
        public virtual ObjectResult<admin_UserSearchList_Result> admin_UserSearchList(string searchBy, Nullable<int> pageNo, Nullable<int> pageSize, string sortColumn, string sortOrder)
        {
            var searchByParameter = searchBy != null ?
                new ObjectParameter("SearchBy", searchBy) :
                new ObjectParameter("SearchBy", typeof(string));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("PageNo", pageNo) :
                new ObjectParameter("PageNo", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("SortColumn", sortColumn) :
                new ObjectParameter("SortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<admin_UserSearchList_Result>("admin_UserSearchList", searchByParameter, pageNoParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter);
        }
    
        public virtual ObjectResult<string> ELMAH_GetErrorsXml(string application, Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter totalCount)
        {
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ELMAH_GetErrorsXml", applicationParameter, pageIndexParameter, pageSizeParameter, totalCount);
        }
    
        public virtual ObjectResult<string> ELMAH_GetErrorXml(string application, Nullable<System.Guid> errorId)
        {
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(string));
    
            var errorIdParameter = errorId.HasValue ?
                new ObjectParameter("ErrorId", errorId) :
                new ObjectParameter("ErrorId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ELMAH_GetErrorXml", applicationParameter, errorIdParameter);
        }
    
        public virtual int ELMAH_LogError(Nullable<System.Guid> errorId, string application, string host, string type, string source, string message, string user, string allXml, Nullable<int> statusCode, Nullable<System.DateTime> timeUtc)
        {
            var errorIdParameter = errorId.HasValue ?
                new ObjectParameter("ErrorId", errorId) :
                new ObjectParameter("ErrorId", typeof(System.Guid));
    
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(string));
    
            var hostParameter = host != null ?
                new ObjectParameter("Host", host) :
                new ObjectParameter("Host", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var allXmlParameter = allXml != null ?
                new ObjectParameter("AllXml", allXml) :
                new ObjectParameter("AllXml", typeof(string));
    
            var statusCodeParameter = statusCode.HasValue ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(int));
    
            var timeUtcParameter = timeUtc.HasValue ?
                new ObjectParameter("TimeUtc", timeUtc) :
                new ObjectParameter("TimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ELMAH_LogError", errorIdParameter, applicationParameter, hostParameter, typeParameter, sourceParameter, messageParameter, userParameter, allXmlParameter, statusCodeParameter, timeUtcParameter);
        }
    }
}
