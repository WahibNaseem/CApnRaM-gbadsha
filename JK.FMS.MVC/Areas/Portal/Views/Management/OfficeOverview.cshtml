@{
    ViewBag.Title = "Office Overview";
    Layout = "~/Views/Shared/_Layout.cshtml";
    int startYear = DateTime.Now.Year;
}
<link href="~/Content/admin/assets/global/plugins/jquery-ui/jquery-ui.min.css" rel="stylesheet" />
<link rel="stylesheet" href="@Url.Content("~/Content/admin/assets/global/plugins/bootstrap-multiselect/css/bootstrap-multiselect.css")" />
<style>
    .topheader {
        font-size: 14px;
        font-weight: bold;
        color: #FFF !important;
        text-transform: uppercase;
        margin-top: 3px;
    }


    .lbl-p5 {
        padding: 5px;
    }

        .lbl-p5.red {
            color: red;
        }


        .lbl-p5.green {
            color: lightgreen;
        }

    input[type="text"].txtcolon:before {
        content: ": ";
    }

    .credit-field {
        width: 80px !important;
    }

    .alignRight {
        text-align: right;
    }

    .alignCenter {
        text-align: center;
    }

    .close {
        background-image: url(/Content/admin/assets/global/img/stick_close.png) !important;
        height: 12px !important;
        width: 12px !important;
        margin-top: 0px !important;
    }

    .custom-listbox .headerbox {
        padding: 3px 0px 3px 5px;
        font-weight: normal;
    }

    .custom-listbox {
        margin-top: 4px;
        margin-bottom: 0px;
    }

    .row {
        margin: 0;
        padding: 3px 0;
    }

    .btn.multiselect {
        text-align: left;
        padding-top: 4px;
        padding-bottom: 4px;
        font-size: 11px;
        color: #555;
    }

    .multiselect .caret {
        right: 0;
        position: absolute;
        margin-top: 8px;
        margin-right: 8px;
    }

    .multiselect-container.dropdown-menu {
        text-transform: none;
        font-size: 14px;
    }

    .no-padding {
        padding: 0;
    }

    #modal_RegionModel .modal-content {
        width: 55% !important;
        margin-left: 30% !important;
    }


    .amcharts-pie-slice {
        transform: scale(1);
        transform-origin: 50% 50%;
        transition-duration: 0.3s;
        transition: all .3s ease-out;
        -webkit-transition: all .3s ease-out;
        -moz-transition: all .3s ease-out;
        -o-transition: all .3s ease-out;
        cursor: pointer;
        box-shadow: 0 0 30px 0 #000;
    }

        .amcharts-pie-slice:hover {
            transform: scale(1.1);
            filter: url(#shadow);
        }



    .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-lg-10, .col-lg-11, .col-lg-12 {
        padding: 0px 1px 0px 1px;
    }

        .col-lg-2:after, .col-lg-3:after, .col-lg-4:after, .col-lg-5:after, .col-lg-6:after, .col-lg-7:after, .col-lg-8:after, .col-lg-9:after, .col-lg-10:after, .col-lg-11:after, .col-lg-12:after {
            content: none !important;
        }

    .row {
        padding: 0px 1px 0px 1px;
    }

        .row:before {
            content: none;
        }

    .dashboard-stat:before, .dashboard-stat:after {
        content: none !important;
    }


</style>
<div class="headerbox">
    <div class="row" style="background-color: #3598DC;color: #fff; min-height:40px;">
        <div class="col-md-12 no-padding">
            <div class="alignCenter" style="padding-top:5px;">
                <div class="col-md-4" style="text-align:left;  padding-left:2px;">
                    <div class="col-md-6">
                        <select id="select_timeduration" class="form-control input-sm">
                            <option value="1">This Week</option>
                            <option value="2">This Week-to-date</option>
                            <option value="3">This Month</option>
                            <option value="4">This Month-to-date</option>
                            <option value="5">This Quarter</option>
                            <option value="6">This Quarter-to-date</option>
                            <option value="7" selected="selected">This Fiscal Year</option>
                            <option value="8">This Fiscal Year-to-date</option>
                            <option value="9">Today</option>
                            <option value="10">Yesterday</option>
                            <option value="11">Last Week</option>
                            <option value="12">Last Month</option>
                            <option value="13">Last Quarter</option>
                            <option value="14">Last Year</option>
                            @*<option value="15">Custom Date</option>*@
                            <option value="16">Period</option>
                        </select>
                    </div>
                    <div class="col-md-5 divspandate no-padding" style="margin-top: 3px; margin-left: 0px; display: block; float: left;">
                        <span id="spnStartDate"></span> - <span id="spnEndtDate"></span>
                    </div>
                    <div class="col-md-3 no-padding" style="display: none;" id="divSD">
                        <input type="text" name="txtStartDate" id="txtStartDate" value="" class="form-control input-sm date-picker RemovePeriodvalidation" />
                    </div>
                    <div class="col-md-3 no-padding" style="display: none;" id="divED">
                        <input type="text" name="txtEndtDate" id="txtEndtDate" value="" class="form-control input-sm date-picker RemovePeriodvalidation" />
                    </div>
                    <div class="col-md-3 no-padding" style="margin-left: 3px; display: none;" id="divmonth">
                        <select id="BillMonth" class="form-control input-sm">
                            <option value="">-Select-</option>
                            <option value="1">January</option>
                            <option value="2">February</option>
                            <option value="3">March</option>
                            <option value="4">April</option>
                            <option value="5">May</option>
                            <option value="6">June</option>
                            <option value="7">July</option>
                            <option value="8">August</option>
                            <option value="9">September</option>
                            <option value="10">October</option>
                            <option value="11">November</option>
                            <option value="12">December</option>
                        </select>
                    </div>
                    <div class="col-md-2 no-padding" style="margin-left: 3px;  display: none;" id="divyear">
                        <select class="form-control input-sm" id="BillYear" style="padding-left: 2px;">
                            <option value="">-Select-</option>
                            @for (int i = 0; i <= 4; i++)
                            {
                                var value = startYear - i;
                                var selected = value == startYear ? "selected" : "";
                                <option value="@value">@value</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-md-4 topheader">
                    Office Overview
                </div>
                <div class="col-md-2 pull-right" style="padding-right:5px;">
                    <div style="display:table-cell;padding-right: 5px;">
                        Region
                    </div>
                    <div style="display:table-cell;width:100%;">
                        @if (ViewBag.regionlist != null)
                        {
                            <select class="form-control input-sm" multiple="multiple" id="regionlist">
                                @foreach (var item in (SelectList)ViewBag.regionlist)
                                {
                                    <option @(item.Selected ? "selected" : "") value="@item.Value">@item.Text</option>
                                }
                            </select>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-12">
        <div class="col-lg-6 col-xs-12 col-sm-12">
            <div class="portlet light ">
                <div class="portlet-body">
                    <div class="row">
                        <div id="BillingBreakdownBySizeChart" style="width:100%;height:400px;"></div>
                    </div>
                    <div class="row">
                        <div class="col-lg-12">
                            <table class="table table-responsive table-borderd" id="tblBillingBreakdownBySizeChart">
                                <thead>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-6 col-xs-12 col-sm-12">
            <div class="portlet light ">
                <div class="portlet-body">
                    <div class="row">
                        <div id="BillingBreakdownByContractChart" style="width:100%;height:400px;"></div>
                    </div>
                    <div class="row">
                        <div class="col-lg-12">
                            <table class="table table-responsive table-borderd" id="tblBillingBreakdownByContractChart">
                                <thead>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-12">
        <div class="portlet light ">
            <div class="portlet-body">
                <div class="row">
                    <div id="AccountTypeChartdiv" style="width:100%;height:500px;"></div>
                </div>

            </div>
        </div>

    </div>
</div>

<div class="modal fade custom-model custom-form-design" id="modal_BillingAccountBreakdownBySize" tabindex="-1" role="basic" aria-hidden="true" style="display: none;">
    <div class="modal-dialog" style="width:1000px">
        <div class="modal-content" style="border-radius: 8px;">
            <div class="modal-header headerbox list" style="padding:0px!important;border-bottom: none;">
                <button type="button" class="close" aria-hidden="true" style="margin-top: 12px !important;margin-right: 12px !important;" onclick="btnBillingAccountBreakdownBySizeModalClose()"></button>
                <h4 class="modal-title" style="margin-top: 0px; margin-bottom: 4px;  padding: 7px!important;font-size: 12px;font-weight: bold;background: #3598DC !important;color: #FFF !important;border: 1px solid #3598DC !important;padding: 0px;border-radius: 8px 8px 0 0;text-transform: uppercase;">
                    Billing Account Breakdown By Size Details
                </h4>
            </div>
            <div class="modal-body" style="padding: 0px 10px 15px 10px;">
                <div class="row">

                    <div class="table-responsive">
                        <table class="table table-striped table-bordered table-hover order-column" id="tblBillingAccountBreakdownBySize" style="margin-top:0 !important;">
                            <thead>
                                <tr>
                                    <th style="text-align:center;width:20px;">SL</th>
                                    <th style="text-align:center;width:90px;">
                                        Region Name
                                    </th>
                                    <th style="text-align:center;width:200px;">
                                        Selected Type
                                    </th>
                                    <th style="text-align:center;width:100px;">
                                        Customer No
                                    </th>
                                    <th style="text-align:center;width:400px;">
                                        Customer Name
                                    </th>
                                    <th style="text-align:center;width:200px;">
                                        Total Revenues
                                    </th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                            <tfoot>
                                <tr style="background:#95a5a6;color:white;">
                                    <td colspan="5" style="width:530px;text-align:center;"><strong>Total:</strong> </td>
                                    <td style="text-align:center;width:200px;"><strong><span id="totalAmount1" style="float: right"></span> </strong> </td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>

                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary button-next  pull-right" onclick="btnBillingAccountBreakdownBySizeModalClose()">
                    Close
                    <i class="fa fa-close"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade custom-model custom-form-design" id="modal_BillingBreakdownByContract" tabindex="-1" role="basic" aria-hidden="true" style="display: none;">
    <div class="modal-dialog" style="width:1000px">
        <div class="modal-content" style="border-radius: 8px;">
            <div class="modal-header headerbox list" style="padding:0px!important;border-bottom: none;">
                <button type="button" class="close" aria-hidden="true" style="margin-top: 12px !important;margin-right: 12px !important;" onclick="btnshowBillingBreakdownByContractModalClose()"></button>
                <h4 class="modal-title" style="margin-top: 0px; margin-bottom: 4px;  padding: 7px!important;font-size: 12px;font-weight: bold;background: #3598DC !important;color: #FFF !important;border: 1px solid #3598DC !important;padding: 0px;border-radius: 8px 8px 0 0;text-transform: uppercase;">
                    Billing Breakdown by Regular Bill, Extra Work,  Client Suppliers  and Additional Bill Details
                </h4>
            </div>
            <div class="modal-body" style="padding: 0px 10px 15px 10px;">
                <div class="row">

                    <div class="table-responsive">
                        <table class="table table-striped table-bordered table-hover order-column" id="tblBillingBreakdownByContract" style="margin-top:0 !important;">
                            <thead>
                                <tr>
                                    <th style="text-align:center;width:20px;">SL</th>
                                    <th style="text-align:center;width:90px;">
                                        Region Name
                                    </th>
                                    <th style="text-align:center;width:200px;">
                                        Selected Type
                                    </th>
                                    <th style="text-align:center;width:100px;">
                                        Customer No
                                    </th>
                                    <th style="text-align:center;width:400px;">
                                        Customer Name
                                    </th>
                                    <th style="text-align:center;width:200px;">
                                        Total Revenues
                                    </th>

                                </tr>
                            </thead>
                            <tbody></tbody>
                            <tfoot>
                                <tr style="background:#95a5a6;color:white;">
                                    <td colspan="5" style="width:530px;text-align:center;"><strong>Total:</strong> </td>
                                    <td style="text-align:center;width:200px;"><strong><span id="totalAmount2" style="float: right"></span> </strong> </td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>

                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary button-next  pull-right" onclick="btnshowBillingBreakdownByContractModalClose()">
                    Close
                    <i class="fa fa-close"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade custom-model custom-form-design" id="modal_BillingAccountRevenueByAccountType" tabindex="-1" role="basic" aria-hidden="true" style="display: none;">
    <div class="modal-dialog" style="width:1000px">
        <div class="modal-content" style="border-radius: 8px;">
            <div class="modal-header headerbox list" style="padding:0px!important;border-bottom: none;">
                <button type="button" class="close" aria-hidden="true" style="margin-top: 12px !important;margin-right: 12px !important;" onclick="btnshowBillingAccountRevenueByAccountTypeModalClose()"></button>
                <h4 class="modal-title" style="margin-top: 0px; margin-bottom: 4px;  padding: 7px!important;font-size: 12px;font-weight: bold;background: #3598DC !important;color: #FFF !important;border: 1px solid #3598DC !important;padding: 0px;border-radius: 8px 8px 0 0;text-transform: uppercase;">
                    Billing Account Revenues By Account Type Details
                </h4>
            </div>
            <div class="modal-body" style="padding: 0px 10px 15px 10px;">
                <div class="row">
                    <div class="table-responsive">
                        <table class="table table-striped table-bordered table-hover order-column" id="tblBillingAccountRevenueByAccountType" style="margin-top:0 !important;">
                            <thead>
                                <tr>
                                    <th style="text-align:center;width:20px;">SL</th>
                                    <th style="text-align:center;width:90px;">
                                        Region Name
                                    </th>
                                    <th style="text-align:center;width:200px;">
                                        Account Type
                                    </th>
                                    <th style="text-align:center;width:100px;">
                                        Customer No
                                    </th>
                                    <th style="text-align:center;width:400px;">
                                        Customer Name
                                    </th>
                                    <th style="text-align:center;width:200px;">
                                        Total Revenues
                                    </th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                            <tfoot>
                                <tr style="background:#95a5a6;color:white;">
                                    <td colspan="5" style="text-align:center;"><strong>Total:</strong> </td>
                                    <td style="text-align:center;width:200px;"><strong><span id="totalAmount3" style="float: right"></span> </strong> </td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>

                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary button-next  pull-right" onclick="btnshowBillingAccountRevenueByAccountTypeModalClose()">
                    Close
                    <i class="fa fa-close"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<script src="@Url.Content("~/Content/admin/assets/global/plugins/jquery.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Content/admin/assets/global/plugins/jquery-ui/jquery-ui.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Content/admin/assets/global/plugins/jquery-inputmask/jquery.inputmask.bundle.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Content/admin/assets/global/plugins/bootstrap-datepicker/js/bootstrap-datepicker.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Content/admin/assets/global/plugins/bootstrap-timepicker/js/bootstrap-timepicker.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Content/admin/assets/global/plugins/bootstrap-datetimepicker/js/bootstrap-datetimepicker.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Content/admin/assets/global/plugins/clockface/js/clockface.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Content/admin/assets/pages/scripts/components-date-time-pickers.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Content/admin/assets/global/plugins/moment.min.js")" type="text/javascript"></script>

<script src="@Url.Content("~/Scripts/fusioncharts/js/fusioncharts.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/fusioncharts/js/fusioncharts.charts.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/fusioncharts/js/themes/fusioncharts.theme.fint.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/fusioncharts/js/themes/fusioncharts.theme.ocean.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/fusioncharts/js/themes/fusioncharts.theme.zune.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/fusioncharts/js/themes/fusioncharts.theme.carbon.js")" type="text/javascript"></script>


<script>

    $(document).ready(function () {
        applyDurationFilter(7);
        $("#regionlist").multiselect({
            includeSelectAllOption: true,
            selectAllText: 'Select all',
            buttonWidth: '100%',
            nonSelectedText: 'Select region..',
            dropRight: true,
            numberDisplayed: 2
        });
        $("#regionlist").change(function () {
            getAllChartData();
        });

        $('#select_timeduration').change(function () {
            applyDurationFilter(parseInt($(this).val()));
        });

        $('#txtStartDate').blur(function () {
            $("#spnStartDate").text($(this).val())
            var spnStartDate = $("#spnStartDate").text();
            var spnEndDate = $("#spnEndtDate").text();
            if (spnStartDate && spnEndDate) {
                getAllChartData();
            }
        });
        $('#txtEndtDate').blur(function () {
            $("#spnEndtDate").text($(this).val())
            var spnStartDate = $("#spnStartDate").text();
            var spnEndDate = $("#spnEndtDate").text();
            if (spnStartDate && spnEndDate) {
                getAllChartData();
            }
        });

        $('#BillMonth').change(function () {
            var billMonth = parseInt($(this).val());
            var billYear = parseInt($('#BillYear').val());
            if (billMonth > 0 && billYear > 0) {
                $('#spnStartDate').html('');
                $('#spnEndtDate').html('');
                getAllChartData();
            }
        });

        $('#BillYear').change(function () {
            var billYear = parseInt($(this).val());
            var billMonth = parseInt($('#BillMonth').val());
            if (billMonth > 0 && billYear > 0) {
                $('#spnStartDate').html('');
                $('#spnEndtDate').html('');
                getAllChartData();
            }
        });
    });

    function formatJSONDateUtc(jsonDate) {
        if (jsonDate != null) {
            var dtstr = jsonDate.substr(6);
            var dateString = dtstr.substring(0, dtstr.length - 2);
            var currentTime = new Date(parseInt(dateString)).toUTCString();
            var date = moment.utc(currentTime).format("MM/DD/YYYY");
            return date;
        }
        return null;
    }

    function getAllChartData() {
        
        var regionIds = $("#regionlist").val();
        var spnStartDate = $("#spnStartDate").text();
        var spnEndDate = $("#spnEndtDate").text();
        var monthToAdd = 13;
        var yearToAdd = null;
        var billYear = $('#BillYear').val();
        var billMonth = $('#BillMonth').val();
        var rowNumber = 10;
        var flag = null;


        $('#BillingBreakdownBySizeChart').empty();
        $('#BillingBreakdownByContractChart').empty();
        $('#AccountTypeChartdiv').empty();

        var sURL = '@Url.Action("GetAllOfficeOverviewData", "Management", new { area = "Portal" })?&spnStartDate=' + spnStartDate + '&spnEndDate=' + spnEndDate + '&monthToAdd=' + monthToAdd + '&yearToAdd=' + yearToAdd + '&billMonth=' + billMonth + '&billYear=' + billYear + '&rowNumber=' + rowNumber + '&regionIds=' + regionIds + '&flag=' + flag;

        $.ajax({
            type: "GET",
            url: sURL,
            contentType: "application/json; charset=utf-8",
            datatype: "json",
            success: function (res) {

                //For Billing Break down By Size
                var data_01 = [];
                var res_01 = res.BillingAccountBreakdownBySize;
                loadBillingBreakdownBySizeChartDataTable(res_01);

                $.each(res_01, function (index, value) {

                    var objData = {
                        link: "JavaScript:showBillingBreakdownBySizeDetail(" + value.RangeName + ");",
                        label: value.RangeName,
                        value: value.TotalAccountReceivable,
                        color: value.ColorCode
                    }
                    data_01.push(objData);

                });
                FusionCharts.ready(function () {
                    var demographicsChart = new FusionCharts({
                        type: 'pie3d',
                        renderAt: 'BillingBreakdownBySizeChart',
                        width: '100%',
                        height: '400',
                        dataFormat: 'json',
                        dataSource: {
                            "chart": {
                                "caption": "Billing Account Breakdown By Size",
                                "subCaption": "Revenue($)",
                                "startingAngle": "120",
                                "showLabels": "0",
                                "showLegend": "1",
                                "enableMultiSlicing": "0",
                                "slicingDistance": "15",
                                "showPercentValues": "1",
                                "showPercentInTooltip": "0",
                                "plotTooltext": "$label : $datavalue",
                                "theme": "fint"
                            },
                            "data": data_01
                        }
                    });
                    demographicsChart.render();

                });


                // For Billing Break down By Contract

                var data_02 = [];
                var res_02 = res.BillingAccountBreakdownByContract;
                loadBillingBreakdownByContractChartDataTable(res_02);
                $.each(res_02, function (index, value) {

                    var objData = {
                        link: "JavaScript:showBillingBreakdownByContractDetail(" + value.RangeName + ");",
                        label: value.RangeName,
                        value: value.TotalAccountReceivable,
                        color: value.ColorCode
                    }
                    data_02.push(objData);

                });
                FusionCharts.ready(function () {
                    var demographicsChart = new FusionCharts({
                        type: 'pie3d',
                        renderAt: 'BillingBreakdownByContractChart',
                        width: '100%',
                        height: '400',
                        dataFormat: 'json',
                        dataSource: {
                            "chart": {
                                "caption": "Billing Breakdown by Regular Bill, Extra Work,  Client Suppliers  and Additional Bill",
                                "subCaption": "Revenue($)",
                                "startingAngle": "120",
                                "showLabels": "0",
                                "showLegend": "1",
                                "enableMultiSlicing": "0",
                                "slicingDistance": "15",
                                "showPercentValues": "1",
                                "showPercentInTooltip": "0",
                                "plotTooltext": "$label : $datavalue",
                                "theme": "fint"
                            },
                            "data": data_02
                        }
                    });
                    demographicsChart.render();

                });

                // For Account Type

                var data_03 = [];
                var res_03 = res.TopRevenuedAccountType;
                $.each(res_03, function (index, value) {

                    var objData = {
                        link: "JavaScript:showBillingAccountRevenueByAccountTypeDetail(" + value.RangeName + ");",
                        label: value.RangeName,
                        value: value.TotalAccountReceivable,
                        color: value.ColorCode
                    }
                    data_03.push(objData);

                });

                FusionCharts.ready(function () {
                    var revenueChart = new FusionCharts({
                        type: 'column3d',
                        renderAt: 'AccountTypeChartdiv',
                        width: '100%',
                        height: '500',
                        dataFormat: 'json',
                        dataSource: {
                            "chart": {
                                "caption": "Billing Account Revenues By Account Type",
                                "subCaption": "",
                                "xAxisName": "Account Type",
                                "yAxisName": "Revenues($)",
                                "paletteColors": "#0075c2",
                                "valueFontColor": "#ffffff",
                                "baseFont": "Helvetica Neue,Arial",
                                "captionFontSize": "14",
                                "subcaptionFontSize": "14",
                                "subcaptionFontBold": "0",
                                "placeValuesInside": "1",
                                "labelDisplay": "rotate",
                                "rotateValues": "1",
                                "showShadow": "0",
                                "divlineColor": "#999999",
                                "divLineIsDashed": "1",
                                "divlineThickness": "1",
                                "divLineDashLen": "1",
                                "divLineGapLen": "1",
                                "canvasBgColor": "#ffffff"
                            },

                            "data": data_03
                        }
                    });
                    revenueChart.render();
                });

            },
            error: function () {

            }
        });
    };

    function getBillingBreakdownBySizeChartData() {
        var regionIds = $("#regionlist").val();
        var spnStartDate = $("#spnStartDate").text();
        var spnEndDate = $("#spnEndtDate").text();
        var billYear = $('#BillYear').val();
        var billMonth = $('#BillMonth').val();

        $('#BillingBreakdownBySizeChart').empty();

        var sURL = '@Url.Action("GetBillingBreakdownBySizeChartData", "Management", new { area = "Portal" })?regionIds=' + regionIds + '&spnStartDate=' + spnStartDate + '&spnEndDate=' + spnEndDate + '&billMonth=' + billMonth + '&billYear=' + billYear;
        $.ajax({
            type: "GET",
            url: sURL,
            contentType: "application/json; charset=utf-8",
            datatype: "json",
            success: function (res) {
                var data = [];
                loadBillingBreakdownBySizeChartDataTable(res);
                $.each(res, function (index, value) {

                    var objData = {
                        link: "JavaScript:showBillingBreakdownBySizeDetail(" + value.RangeName + ");",
                        label: value.RangeName,
                        value: value.TotalAccountReceivable,
                        color: value.ColorCode
                    }
                    data.push(objData);

                });
                FusionCharts.ready(function () {
                    var demographicsChart = new FusionCharts({
                        type: 'pie3d',
                        renderAt: 'BillingBreakdownBySizeChart',
                        width: '100%',
                        height: '400',
                        dataFormat: 'json',
                        dataSource: {
                            "chart": {
                                "caption": "Billing Account Breakdown By Size",
                                "subCaption": "Revenue($)",
                                "startingAngle": "120",
                                "showLabels": "0",
                                "showLegend": "1",
                                "enableMultiSlicing": "0",
                                "slicingDistance": "15",
                                "showPercentValues": "1",
                                "showPercentInTooltip": "0",
                                "plotTooltext": "$label : $datavalue",
                                "theme": "fint"
                            },
                            "data": data
                        }
                    });
                    demographicsChart.render();

                });
            },
            error: function () {

            }
        });
    };

    function loadBillingBreakdownBySizeChartDataTable(data) {
        $('#tblBillingBreakdownBySizeChart').show();
        var elem = $('#tblBillingBreakdownBySizeChart tbody');
        var tempRow = "";
        var rowOne = "";
        var rowTwo = "";
        var rowThree = "";

        $(elem).html('');
        $.each(data, function (index, value) {
            tempRow = "";
            if (index < 2) {
                if (index % 2 == 0) {
                    rowOne += '<td style="width: 20px; height: 10px; background:' + value.ColorCode + '"></td>'
                    rowOne += '<td style="width: 270px;text-align: left;font-size: 9px;font-weight: bold;">' + value.RangeName + '</td>';
                    rowOne += '<td style="width: 20px;text-align: right;font-size: 10px;font-weight: bold;">' + value.TotalAccount + '</td>';
                    rowOne += '<td style="width: 150px;text-align: right;font-size: 10px;font-weight: bold;">' + formatCurrency(value.TotalAccountReceivable, true) + '</td>';
                } else {
                    rowOne += '<td style="width: 20px; height: 10px; background:' + value.ColorCode + '"></td>'
                    rowOne += '<td style="width: 270px;text-align: left;font-size: 9px;font-weight: bold;">' + value.RangeName + '</td>';
                    rowOne += '<td style="width: 20px;text-align: right;font-size: 10px;font-weight: bold;">' + value.TotalAccount + '</td>';
                    rowOne += '<td style="width: 150px;text-align: right;font-size: 10px;font-weight: bold;">' + formatCurrency(value.TotalAccountReceivable, true) + '</td>';
                }
            }
            else if (index >= 2 && index < 4) {
                if (index % 2 == 0) {
                    rowTwo += '<td style="width: 20px; height: 10px; background:' + value.ColorCode + '"></td>'
                    rowTwo += '<td style="width: 270px;text-align: left;font-size: 9px;font-weight: bold;">' + value.RangeName + '</td>';
                    rowTwo += '<td style="width: 20px;text-align: right;font-size: 10px;font-weight: bold;">' + value.TotalAccount + '</td>';
                    rowTwo += '<td style="width: 150px;text-align: right;font-size: 10px;font-weight: bold;">' + formatCurrency(value.TotalAccountReceivable, true) + '</td>';
                } else {
                    rowTwo += '<td style="width: 20px; height: 10px; background:' + value.ColorCode + '"></td>'
                    rowTwo += '<td style="width: 270px;text-align: left;font-size: 9px;font-weight: bold;">' + value.RangeName + '</td>';
                    rowTwo += '<td style="width: 20px;text-align: right;font-size: 10px;font-weight: bold;">' + value.TotalAccount + '</td>';
                    rowTwo += '<td style="width: 150px;text-align: right;font-size: 10px;font-weight: bold;">' + formatCurrency(value.TotalAccountReceivable, true) + '</td>';
                }
            } else {
                rowThree += '<td style="width: 20px; height: 10px; background:' + value.ColorCode + '"></td>'
                rowThree += '<td style="width: 270px;text-align: left;font-size: 9px;font-weight: bold;">' + value.RangeName + '</td>';
                rowThree += '<td style="width: 20px;text-align: right;font-size: 10px;font-weight: bold;">' + value.TotalAccount + '</td>';
                rowThree += '<td style="width: 150px;text-align: right;font-size: 10px;font-weight: bold;">' + formatCurrency(value.TotalAccountReceivable, true) + '</td>';
            }

        });
        tempRow += '<tr>';
        tempRow += rowOne;
        tempRow += '</tr>';

        tempRow += '<tr>';
        tempRow += rowTwo;
        tempRow += '</tr>';

        if (rowThree) {
            tempRow += '<tr>';
            tempRow += rowThree;
            tempRow += '</tr>';
        }
        $(elem).append(tempRow);
    };

    function getBillingBreakdownByContractChartData() {
        var regionIds = $("#regionlist").val();
        var spnStartDate = $("#spnStartDate").text();
        var spnEndDate = $("#spnEndtDate").text();
        var billYear = $('#BillYear').val();
        var billMonth = $('#BillMonth').val();

        $('#BillingBreakdownByContractChart').empty();

        var sURL = '@Url.Action("GetBillingBreakdownByContractChartData", "Management", new { area = "Portal" })?regionIds=' + regionIds + '&spnStartDate=' + spnStartDate + '&spnEndDate=' + spnEndDate + '&billMonth=' + billMonth + '&billYear=' + billYear;
        $.ajax({
            type: "GET",
            url: sURL,
            contentType: "application/json; charset=utf-8",
            datatype: "json",
            success: function (res) {
                var data = [];
                loadBillingBreakdownByContractChartDataTable(res);
                $.each(res, function (index, value) {

                    var objData = {
                        link: "JavaScript:showBillingBreakdownByContractDetail(" + value.RangeName + ");",
                        label: value.RangeName,
                        value: value.TotalAccountReceivable,
                        color: value.ColorCode
                    }
                    data.push(objData);

                });
                FusionCharts.ready(function () {
                    var demographicsChart = new FusionCharts({
                        type: 'pie3d',
                        renderAt: 'BillingBreakdownByContractChart',
                        width: '100%',
                        height: '400',
                        dataFormat: 'json',
                        dataSource: {
                            "chart": {
                                "caption": "Billing Breakdown by Regular Bill, Extra Work,  Client Suppliers  and Additional Bill",
                                "subCaption": "Revenue($)",
                                "startingAngle": "120",
                                "showLabels": "0",
                                "showLegend": "1",
                                "enableMultiSlicing": "0",
                                "slicingDistance": "15",
                                "showPercentValues": "1",
                                "showPercentInTooltip": "0",
                                "plotTooltext": "$label : $datavalue",
                                "theme": "fint"
                            },
                            "data": data
                        }
                    });
                    demographicsChart.render();

                });
            },
            error: function () {

            }
        });
    };

    function loadBillingBreakdownByContractChartDataTable(data) {
        $('#tblBillingBreakdownByContractChart').show();
        var elem = $('#tblBillingBreakdownByContractChart tbody');
        var tempRow = "";
        $(elem).html('');
        var rowOne = "";
        var rowTwo = "";
        var rowThree = "";

        $.each(data, function (index, value) {
            tempRow = "";
            if (index < 2) {
                if (index % 2 == 0) {
                    rowOne += '<td style="width: 20px; height: 10px; background:' + value.ColorCode + '"></td>'
                    rowOne += '<td style="width: 270px;text-align: left;font-size: 9px;font-weight: bold;">' + value.RangeName + '</td>';
                    rowOne += '<td style="width: 20px;text-align: right;font-size: 10px;font-weight: bold;">' + value.TotalAccount + '</td>';
                    rowOne += '<td style="width: 150px;text-align: right;font-size: 10px;font-weight: bold;">' + formatCurrency(value.TotalAccountReceivable, true) + '</td>';
                } else {
                    rowOne += '<td style="width: 20px; height: 10px; background:' + value.ColorCode + '"></td>'
                    rowOne += '<td style="width: 270px;text-align: left;font-size: 9px;font-weight: bold;">' + value.RangeName + '</td>';
                    rowOne += '<td style="width: 20px;text-align: right;font-size: 10px;font-weight: bold;">' + value.TotalAccount + '</td>';
                    rowOne += '<td style="width: 150px;text-align: right;font-size: 10px;font-weight: bold;">' + formatCurrency(value.TotalAccountReceivable, true) + '</td>';
                }
            }
            else if (index >= 2 && index < 4) {
                if (index % 2 == 0) {
                    rowTwo += '<td style="width: 20px; height: 10px; background:' + value.ColorCode + '"></td>'
                    rowTwo += '<td style="width: 270px;text-align: left;font-size: 9px;font-weight: bold;">' + value.RangeName + '</td>';
                    rowTwo += '<td style="width: 20px;text-align: right;font-size: 10px;font-weight: bold;">' + value.TotalAccount + '</td>';
                    rowTwo += '<td style="width: 150px;text-align: right;font-size: 10px;font-weight: bold;">' + formatCurrency(value.TotalAccountReceivable, true) + '</td>';
                } else {
                    rowTwo += '<td style="width: 20px; height: 10px; background:' + value.ColorCode + '"></td>'
                    rowTwo += '<td style="width: 270px;text-align: left;font-size: 9px;font-weight: bold;">' + value.RangeName + '</td>';
                    rowTwo += '<td style="width: 20px;text-align: right;font-size: 10px;font-weight: bold;">' + value.TotalAccount + '</td>';
                    rowTwo += '<td style="width: 150px;text-align: right;font-size: 10px;font-weight: bold;">' + formatCurrency(value.TotalAccountReceivable, true) + '</td>';
                }
            } else {
                rowThree += '<td style="width: 20px; height: 10px; background:' + value.ColorCode + '"></td>'
                rowThree += '<td style="width: 270px;text-align: left;font-size: 9px;font-weight: bold;">' + value.RangeName + '</td>';
                rowThree += '<td style="width: 20px;text-align: right;font-size: 10px;font-weight: bold;">' + value.TotalAccount + '</td>';
                rowThree += '<td style="width: 150px;text-align: right;font-size: 10px;font-weight: bold;">' + formatCurrency(value.TotalAccountReceivable, true) + '</td>';
            }

        });
        tempRow += '<tr>';
        tempRow += rowOne;
        tempRow += '</tr>';

        tempRow += '<tr>';
        tempRow += rowTwo;
        tempRow += '</tr>';

        if (rowThree) {
            tempRow += '<tr>';
            tempRow += rowThree;
            tempRow += '</tr>';
        }
        $(elem).append(tempRow);

    };


    function btnshowBillingBreakdownByContractModalClose() {
        $("#modal_BillingBreakdownByContract").modal('hide');
    }
    function showBillingBreakdownByContractDetail(flag) {
        $('#modal_BillingBreakdownByContract').modal('show');
        var regionIds = $("#regionlist").val();
        var spnStartDate = $("#spnStartDate").text();
        var spnEndDate = $("#spnEndtDate").text();
        var billYear = $('#BillYear').val();
        var billMonth = $('#BillMonth').val();

        var elem = $('#tblBillingBreakdownByContract tbody');
        $('#tblBillingBreakdownByContract tbody').empty('');
        var sl = 0;
        $(elem).html('');
        $.ajax({
            url: '@Url.Action("GetBillingAccountBreakdownByContractData", "Management", new { area = "Portal" })?flagId=' + flag + '&regionIds=' + regionIds + '&spnStartDate=' + spnStartDate + '&spnEndDate=' + spnEndDate + '&billMonth=' + billMonth + '&billYear=' + billYear,
            success: function (res) {
                var tempRow = "";
                var totalAmount = 0.0;

                var sl = 0;
                $('#totalAmount2').text('');

                $.each(res, function (index, value) {

                    tempRow = "";

                    totalAmount = totalAmount + parseFloat(value.Total);
                    sl = sl + 1;
                    tempRow += '<tr>';
                    tempRow += '<td style="text-align: center;font-size: 12px;">' + sl + '</td>';
                    tempRow += '<td style="text-align: center;font-size: 12px;">' + value.RegionName + '</td>';
                    tempRow += '<td style="text-align: center;font-size: 12px;">' + value.RangeName + '</td>';
                    tempRow += '<td style="text-align: center;font-size: 12px;">' + value.CustomerNo + '</td>';
                    tempRow += '<td style="text-align: center;font-size: 12px;">' + value.CustomerName + '</td>';
                    tempRow += '<td style="text-align: right;font-size: 12px;">' + formatCurrency(value.Total, true) + '</td>';
                    tempRow += '</tr>';

                    $(elem).append(tempRow);
                });

                $('#totalAmount2').text(formatCurrency(totalAmount, true));

            },
            error: function () { }

        });
    }
    function formatCurrency(total, dollar) {
        dollar = (dollar == true ? true : false);
        var neg = false;
        if (total < 0) {
            neg = true;
            total = Math.abs(total);
        }
        return (neg ? "-" : '') + (dollar ? "$" : "") + parseFloat(total, 10).toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,").toString();
    };

    function btnBillingAccountBreakdownBySizeModalClose() {
        $("#modal_BillingAccountBreakdownBySize").modal('hide');
    }
    function showBillingBreakdownBySizeDetail(flag) {
        $('#modal_BillingAccountBreakdownBySize').modal('show');
        var regionIds = $("#regionlist").val();
        var spnStartDate = $("#spnStartDate").text();
        var spnEndDate = $("#spnEndtDate").text();
        var billYear = $('#BillYear').val();
        var billMonth = $('#BillMonth').val();

        var elem = $('#tblBillingAccountBreakdownBySize tbody');
        $('#tblBillingAccountBreakdownBySize tbody').empty('');
        var sl = 0;
        $(elem).html('');
        $.ajax({
            url: '@Url.Action("GetBillingAccountBreakdownBySizeData", "Management", new { area = "Portal" })?flagId=' + flag + '&regionIds=' + regionIds + '&spnStartDate=' + spnStartDate + '&spnEndDate=' + spnEndDate + '&billMonth=' + billMonth + '&billYear=' + billYear,
            success: function (res) {
                var tempRow = "";
                var totalAmount = 0.0;
                var sl = 0;
                $('#totalAmount1').text('');

                $.each(res, function (index, value) {

                    tempRow = "";

                    totalAmount = totalAmount + parseFloat(value.Total);
                    sl = sl + 1;
                    tempRow += '<tr>';
                    tempRow += '<td style="text-align: center;font-size: 12px;">' + sl + '</td>';
                    tempRow += '<td style="text-align: center;font-size: 12px;">' + value.RegionName + '</td>';
                    tempRow += '<td style="text-align: center;font-size: 12px;">' + value.RangeName + '</td>';
                    tempRow += '<td style="text-align: center;font-size: 12px;">' + value.CustomerNo + '</td>';
                    tempRow += '<td style="text-align: center;font-size: 12px;">' + value.CustomerName + '</td>';
                    tempRow += '<td style="text-align: right;font-size: 12px;">' + formatCurrency(value.Total, true) + '</td>';
                    tempRow += '</tr>';

                    $(elem).append(tempRow);
                });

                $('#totalAmount1').text(formatCurrency(totalAmount, true));
            },
            error: function () { }

        });
    };

    function getAccountTypeWiseChartData() {
        var regionIds = $("#regionlist").val();
        var spnStartDate = $("#spnStartDate").text();
        var spnEndDate = $("#spnEndtDate").text();
        var billYear = $('#BillYear').val();
        var billMonth = $('#BillMonth').val();

        $('#AccountTypeChartdiv').empty();
        var sURL = '@Url.Action("GetAccountTypeWiseChartData", "Management", new { area = "Portal" })?regionIds=' + regionIds + '&spnStartDate=' + spnStartDate + '&spnEndDate=' + spnEndDate + '&billMonth=' + billMonth + '&billYear=' + billYear;
        $.ajax({
            type: "GET",
            url: sURL,
            contentType: "application/json; charset=utf-8",
            datatype: "json",
            success: function (res) {

                var data = [];
                $.each(res, function (index, value) {

                    var objData = {
                        link: "JavaScript:showBillingAccountRevenueByAccountTypeDetail(" + value.RangeName + ");",
                        label: value.RangeName,
                        value: value.TotalAccountReceivable,
                        color: value.ColorCode
                    }
                    data.push(objData);

                });

                FusionCharts.ready(function () {
                    var revenueChart = new FusionCharts({
                        type: 'column3d',
                        renderAt: 'AccountTypeChartdiv',
                        width: '100%',
                        height: '500',
                        dataFormat: 'json',
                        dataSource: {
                            "chart": {
                                "caption": "Billing Account Revenues By Account Type",
                                "subCaption": "",
                                "xAxisName": "Account Type",
                                "yAxisName": "Revenues($)",
                                "paletteColors": "#0075c2",
                                "valueFontColor": "#ffffff",
                                "baseFont": "Helvetica Neue,Arial",
                                "captionFontSize": "14",
                                "subcaptionFontSize": "14",
                                "subcaptionFontBold": "0",
                                "placeValuesInside": "1",
                                "labelDisplay": "rotate",
                                "rotateValues": "1",
                                "showShadow": "0",
                                "divlineColor": "#999999",
                                "divLineIsDashed": "1",
                                "divlineThickness": "1",
                                "divLineDashLen": "1",
                                "divLineGapLen": "1",
                                "canvasBgColor": "#ffffff"
                            },

                            "data": data
                        }
                    });
                    revenueChart.render();
                });
            },
            error: function () {

            }
        });
    };
    function btnshowBillingAccountRevenueByAccountTypeModalClose() {
        $("#modal_BillingAccountRevenueByAccountType").modal('hide');
    }
    function showBillingAccountRevenueByAccountTypeDetail(flag) {
        $('#modal_BillingAccountRevenueByAccountType').modal('show');
        var regionIds = $("#regionlist").val();
        var spnStartDate = $("#spnStartDate").text();
        var spnEndDate = $("#spnEndtDate").text();
        var billYear = $('#BillYear').val();
        var billMonth = $('#BillMonth').val();

        var elem = $('#tblBillingAccountRevenueByAccountType tbody');
        var sl = 0;
        $(elem).html('');
        $.ajax({
            url: '@Url.Action("GetBillingAccountRevenueByAccountTypeData", "Management", new { area = "Portal" })?flagId=' + flag + '&regionIds=' + regionIds + '&spnStartDate=' + spnStartDate + '&spnEndDate=' + spnEndDate + '&billMonth=' + billMonth + '&billYear=' + billYear,
            success: function (res) {
                var tempRow = "";
                var totalAmount = 0.0;
                var sl = 0;
                $('#totalAmount3').text('');

                $.each(res, function (index, value) {

                    tempRow = "";

                    totalAmount = totalAmount + parseFloat(value.Total);
                    sl = sl + 1;
                    tempRow += '<tr>';
                    tempRow += '<td style="text-align: center;font-size: 12px;">' + sl + '</td>';
                    tempRow += '<td style="text-align: center;font-size: 12px;">' + value.RegionName + '</td>';
                    tempRow += '<td style="text-align: center;font-size: 12px;">' + value.RangeName + '</td>';
                    tempRow += '<td style="text-align: center;font-size: 12px;">' + value.CustomerNo + '</td>';
                    tempRow += '<td style="text-align: center;font-size: 12px;">' + value.CustomerName + '</td>';
                    tempRow += '<td style="text-align: right;font-size: 12px;">' + formatCurrency(value.Total, true) + '</td>';
                    tempRow += '</tr>';

                    $(elem).append(tempRow);
                });

                $('#totalAmount3').text(formatCurrency(totalAmount, true));

            },
            error: function () { }

        });

    }

    function applyDurationFilter(v) {
        $('#spnStartDate').html('');
        $('#spnEndtDate').html('');
        $('.divspandate').show();
        $('#divSD').hide();
        $('#divED').hide();
        $('#divmonth').hide();
        $('#divyear').hide();
        $('#spnStartDate').html('');
        $('#spnEndtDate').html('');
        $('#BillMonth').val('');
        $('#BillYear').val('');

        switch (v) {
            case 1:
                firstDay = moment().startOf('isoWeek').toString();
                lastDay = moment().endOf('isoWeek').toString();
                break;
            case 2:
                //code block
                firstDay = moment().startOf('isoWeek').toString();
                lastDay = new Date().toString();
                break;
            case 3:
                firstDay = moment().subtract(0, 'month').startOf('month').toString();
                lastDay = moment().subtract(0, 'month').endOf('month').toString();
                break;
            case 4:
                //code block
                firstDay = moment().subtract(0, 'month').startOf('month').toString();
                lastDay = new Date().toString();
                break;
            case 5:
                //code block
                firstDay = moment().startOf('quarter').toString();
                lastDay = moment().endOf('quarter').toString();
                break;
            case 6:
                //code block
                firstDay = moment().startOf('quarter').toString();
                lastDay = new Date().toString();
                break;
            case 7:
                //code block
                firstDay = moment().startOf('year').toString();;
                lastDay = moment().endOf('year').toString();
                break;
            case 8:
                //code block
                firstDay = moment().startOf('year').toString();
                lastDay = new Date().toString();
                break;
            case 9:
                //code block
                firstDay = moment().toString();
                lastDay = moment().toString();
                break;
            case 10:
                //code block
                firstDay = moment().add(-1, 'days').toString();
                lastDay = moment().add(-1, 'days').toString();
                break;
            case 11:
                //code block
                firstDay = moment().subtract(1, 'week').startOf('week').toString();
                lastDay = moment().subtract(1, 'week').endOf('week').toString();
                break;
            case 12:
                //code block
                firstDay = moment().subtract(1, 'month').startOf('month').toString();
                lastDay = moment().subtract(1, 'month').endOf('month').toString();
                break;
            case 13:
                //code block
                firstDay = moment().subtract(1, 'quarter').startOf('quarter').toString();
                lastDay = moment().subtract(1, 'quarter').endOf('quarter').toString();
                break;
            case 14:
                //code block
                firstDay = moment().subtract(1, 'year').startOf('year').toString();
                lastDay = moment().subtract(1, 'year').endOf('year').toString();
                break;
            case 15:
                //code block
                $('#divspandate').hide();
                $('#divSD').show();
                $('#divED').show();
                $('#txtStartDate').val('');
                $('#txtEndtDate').val('')
                break;
            case 16:
                $('.divspandate').hide();
                $('#divSD').hide();
                $('#divED').hide();
                $('#divmonth').show();
                $('#divyear').show();
                break
            default:
                //code block
        }
        $('#spnStartDate').html(moment(firstDay).format('L'));
        $('#spnEndtDate').html(moment(lastDay).format('L'));

        var value = parseInt($('#select_timeduration').val());

        if (value != 16) {
            getAllChartData();
        } else {
            $("#spnStartDate").text('');
            $("#spnEndtDate").text('');

        }
    };

</script>
