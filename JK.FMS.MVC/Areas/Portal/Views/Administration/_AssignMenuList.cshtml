@using JKViewModels;
@model AssignMenuModel

@if (Model != null && Model.RoleBasedMenuAccessList != null && Model.RoleBasedMenuAccessList.Count > 0)
{

    @Html.HiddenFor(m => m.RoleId, new { @id = "hdnRoleId", Value = Model.RoleId })

    for (int i = 0; i < Model.RoleBasedMenuAccessList.Count; i++)
    {
        @Html.HiddenFor(m => m.RoleBasedMenuAccessList[i].MenuId, new { @id = "hdnMenu_" + Model.RoleBasedMenuAccessList[i].MenuId, Value = Model.RoleBasedMenuAccessList[i].MenuId })
        @Html.HiddenFor(m => m.RoleBasedMenuAccessList[i].IsReadAccess, new { @id = "hdnIsReadAccess_" + Model.RoleBasedMenuAccessList[i].MenuId, Value = Model.RoleBasedMenuAccessList[i].IsReadAccess })
        @Html.HiddenFor(m => m.RoleBasedMenuAccessList[i].IsWriteAccess , new { @id = "hdnIsWriteAccess_" + Model.RoleBasedMenuAccessList[i].MenuId, Value = Model.RoleBasedMenuAccessList[i].IsWriteAccess })
        @Html.HiddenFor(m => m.RoleBasedMenuAccessList[i].IsChanged, new { @id = "hdnIsChanged_" + Model.RoleBasedMenuAccessList[i].MenuId, Value = Model.RoleBasedMenuAccessList[i].IsChanged })
    }
}


<div class="treeview-header clearfix">
    <label class="colLeft">Menu Name</label>
    <div class="chkMenuAccess">
        <div class="colMiddle">Is View <input type="checkbox" class="chkMenu chkAll" id="chkAllRead" /></div>
        <div class="colRight">Is Insert <input type="checkbox" class="chkMenu chkAll" id="chkAllWrite" /></div>
        <div class="colRight" style="margin-left:0px !important">Is Delete <input type="checkbox" class="chkMenu chkAll" id="chkAllDelete" /></div>
    </div>
</div>
<ul id="treeView" class="treeview-red">
    @if (Model != null && Model.RoleBasedMenuAccessList != null && Model.RoleBasedMenuAccessList.Count > 0)
    {

        List<RolebasedMenuAccessDetailModel> menus = Model.RoleBasedMenuAccessList.Where(p => p.ParentMenuId == 0 && p.IsEnable == true && p.IsDisplay == true).ToList();

        for (int i = 0; i < menus.Count; i++)
        {
            <li id="li_@menus[i].MenuId" data-tt-id="@menus[i].MenuId">

                <label>@menus[i].MenuName</label>
                @if (Model.RoleBasedMenuAccessList.Count(p => p.ParentMenuId == menus[i].MenuId && p.IsEnable == true) > 0)
                {
                    <div class="chkMenuAccess">
                        <input type="checkbox" class="chkMenu chkAllRead chkParentRead" data-parentmenuid="@menus[i].ParentMenuId" data-menuid="@menus[i].MenuId" id="chkIsReadAccess_@menus[i].MenuId" />
                    
                        <input type="checkbox" class="chkMenu chkAllWrite chkParentWrite" data-parentmenuid="@menus[i].ParentMenuId" data-menuid="@menus[i].MenuId" id="chkIsWriteAccess_@menus[i].MenuId" />
                   
                        <input type="checkbox" class="chkMenu chkAllDelete chkParentDelete" data-parentmenuid="@menus[i].ParentMenuId" data-menuid="@menus[i].MenuId" id="chkIsDeleteAccess_@menus[i].MenuId" />
                    </div>
                        <ul>
                            @RenderMenuItem(Model.RoleBasedMenuAccessList, menus[i].MenuId, menus[i].MenuId)
                        </ul>
                }
                else
                {
                    <div class="chkMenuAccess">
                        <input type="checkbox" class="chkMenu chkAllRead chkParentRead" checked="checked" data-parentmenuid="@menus[i].ParentMenuId" data-menuid="@menus[i].MenuId" id="chkIsReadAccess_@menus[i].MenuId" />
                   
                        <input type="checkbox" class="chkMenu chkAllWrite chkParentWrite" checked="checked" data-parentmenuid="@menus[i].ParentMenuId" data-menuid="@menus[i].MenuId" id="chkIsWriteAccess_@menus[i].MenuId" />
                   
                        <input type="checkbox" class="chkMenu chkAllDelete chkParentDelete" checked="checked" data-parentmenuid="@menus[i].ParentMenuId" data-menuid="@menus[i].MenuId" id="chkIsDeleteAccess_@menus[i].MenuId" />
                    </div>
                }
            </li>
        }
    }
</ul>







@helper RenderMenuItem(List<RolebasedMenuAccessDetailModel> menuList, int parentMenuId, int mainParent)
{
List<RolebasedMenuAccessDetailModel> menus = menuList.Where(p => p.ParentMenuId == parentMenuId && p.IsEnable == true && p.IsDisplay == true).ToList();
for (int i = 0; i < menus.Count; i++)
{
        <li id="li_@menus[i].MenuId">

            <label>@menus[i].MenuName</label>
            <div class="chkMenuAccess">
                <input type="checkbox" class="chkMenu chkAllRead chkchildRead" data-parentmenuid="@parentMenuId" data-menuid="@menus[i].MenuId" id="chkIsReadAccess_@menus[i].MenuId" />
                <input type="checkbox" class="chkMenu chkAllWrite chkchildWrite" data-parentmenuid="@parentMenuId" data-menuid="@menus[i].MenuId" id="chkIsWriteAccess_@menus[i].MenuId" />
                <input type="checkbox" class="chkMenu chkAllDelete chkchildDelete" data-parentmenuid="@parentMenuId" data-menuid="@menus[i].MenuId" id="chkIsDeleteAccess_@menus[i].MenuId" />
            </div>

            @if (menuList.Count(p => p.ParentMenuId == menus[i].MenuId && p.IsEnable == true) > 0)
            {
                <ul>
                    @RenderMenuItem(menuList, menus[i].MenuId, mainParent)
                </ul>

            }
        </li>
}
}
@Html.HiddenFor(m => Model.Message, new { @id = "hdnMessage", Value = Model.Message })
@Html.HiddenFor(m => Model.MessageType, new { @id = "hdnMessageType", Value = Model.MessageType })

