@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section styles{
    <link href="~/Content/admin/assets/layouts/layout2/css/custom-rev-1.css" rel="stylesheet"/>
}

<style type="text/css">
     .row { 
         margin: 0; 
         padding: 3px 0; 
     } 
     .topheader { 
         font-size: 14px; 
         font-weight: bold; 
         color: #FFF !important; 
         text-transform: uppercase; 
         margin-top: 3px; 
     } 
     .alignCenter { 
         text-align: center; 
     } 
     .custom-listbox .headerbox {
         padding: 3px 0px 3px 5px;
         font-weight: normal;
     }
     .custom-listbox {
         margin-top: 4px;
         margin-bottom: 0px;
     }
     #tblVendorList th { 
         vertical-align: middle; 
     } 

     .label-horizontal-alignment {
         margin-top: 10px; 
         margin-right: -15px;         
     }
     
     .large-label-horizontal-alignment {
         margin-top: -2px; 
         margin-right: -28px;
     }     
     
</style>

<div class="headerbox">
    <div class="row" style="background-color: #3598DC; color: #fff;">
        <div class="col-md-12">
            <div class="alignCenter">
                <div class="col-md-12 topheader">VENDOR OPEN INVOICES</div>
            </div>
        </div>
    </div>
</div>

<div class="custom-listbox">
    <div class="headerbox">
        <div class="row" id="filterControls">
            <form class="form-horizontal">
                <div class="form-row">
                    <div class="col-md-2">
                        <div class="input-icon">
                            <i class="icon-magnifier icon-align-right"></i>
                            <input id="inputSearch" type="text" autocomplete="off" placeholder="Search..." value="" class="form-control typeahead" tabindex="1"/>
                        </div>
                    </div>
                    <div class="col-md-10">
                        <div class="col-md-2 col-md-push-5 text-right large-label-horizontal-alignment"><h4>Amount to Pay:</h4></div>
                        <div class="col-md-1 col-md-push-5 text-left large-label-horizontal-alignment"><h4 id="amountToPay">$0.00</h4></div>
                        <div class="col-md-1 col-md-push-5 text-right label-horizontal-alignment">Vendor</div>
                        <div class="col-md-2 col-md-push-5">@Html.DropDownList("selectVendorList", (SelectList) ViewBag.VendorList, "All", new {@class = "form-control", @id = "selectVendorList", @tabindex = "2"})</div>
                        <div class="col-md-1 col-md-push-5"><input type="button" name="btnRequestPayment" id="btnRequestPayment" class="btn btn-primary button-next" value="Request Payment" onclick="requestPayment();"  tabindex="3"/></div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="tablebox" style="background-color: #fff;">
    <div class="table-responsive" id="divtblVendorList" style="display: none;">
        <table class="table table-striped table-bordered table-hover order-column" id="tblVendorList" style="display: none; margin-top: 0 !important;">
            <thead>
            <tr>
                <th style="width: 5%; text-align: center;"></th>
                <th style="text-align: center; width: 3%; font-weight: bolder;"> <input type="checkbox" id="chkSelectAll" onclick="SelectAllVendorInvoices(this)"/></th>
                <th style="text-align: left; width: 30%; font-weight: bolder;">Vendor</th>
                <th style="text-align: center; width: 10%;">Invoice Num</th>
                <th style="text-align: center; width: 10%;">Invoice Date</th>
                <th style="text-align: center; width: 10%;">Discount Due Date</th>
                <th style="text-align: center; width: 10%;">Gross Due</th>
            </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>

<div class="modal fade custom-model custom-form-design" id="modalRequestPay" tabindex="-1" role="basic" aria-hidden="true" style="display: none;">
    <div class="modal-dialog modal-lg" id="modalDialogDiv">
        <div class="modal-content" style="border-radius: 8px;">
            <div class="modal-header headerbox list" style="padding: 0px !important; border-bottom: none;">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true" style="margin-top: 12px !important; margin-right: 12px !important;"></button>
                <h4 class="modal-title" style="margin-top: 0px; margin-bottom: 4px; padding: 7px !important; font-size: 12px; font-weight: bold; background: #3598DC !important; color: #FFF !important; border: 1px solid #3598DC !important; padding: 0px; border-radius: 8px 8px 0 0; text-transform: uppercase;">
                    Request To Pay Vendor Invoices 
                </h4>
            </div>
            <div class="modal-body" style="padding: 0px 30px 15px 30px;">
                <div class="row">
                    <label class="control-label col-md-2">To:</label>
                    <div class="col-md-10">
                        <input type="text" id="txtToEmail" name="txtToEmail" class="form-control input-sm" value="corpaccountspayable@janiking.com" readonly="readonly"/>
                    </div>
                </div>
                <div class="row">
                    <label class="control-label col-md-2">CC:</label>
                    <div class="col-md-10">
                        <input type="text" id="txtCcEmail" name="txtCcEmail" class="form-control input-sm" value="" placeholder="Add Additional Email Addresses Here. Separate by comma."/>
                    </div>
                </div>
                <div class="row">
                    <label class="control-label col-md-2">Subject:</label>
                    <div class="col-md-10">
                        <input type="text" id="txtSubjectEmail" name="txtSubjectEmail" class="form-control input-sm disabled" value="Request Invoice Payment from @ViewBag.selectedRegionName [Notifications]"/>
                    </div>
                </div>
                <div class="row">
                    <label class="control-label col-md-2">Body:</label>
                    <div class="col-md-10">
                        <textarea rows="5" id="txtEmailBody" name="txtEmailBody" class="form-control input-sm"></textarea>
                    </div>
                </div>
                <hr/>
                <div class="row">
                    <div class="col-md-12">
                        <h5>
                            <strong>Please pay the following Vendor Invoices:</strong>
                        </h5>
                        <div id="vendorInvoiceList" class="pre-scrollable" style="max-height: 300px; overflow-y: auto;"></div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-push-6 pull-left">&nbsp;</div>
                    <div class="col-md-6 text-right pull-right text-info"><h5  id="totalToPay"></h5></div>
                </div>
                <hr/>
                <div class="row">
                    <div class="col-md-6 text-left pull-left"></div>
                    <div class="col-md-push-6 pull-right">
                        <button type="button" id="btnClose" class="btn" data-dismiss="modal">Close</button>
                        <button type="button" id="btnSendEmail" class="btn btn-primary" onclick="sendRequestToPayEmail()">Send Request</button>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-push-6 pull-left">&nbsp;</div>
                    <div class="col-md-6 text-right pull-right text-info hidden" id="processingMsg"><i class="fa fa-gear fa-spin text-info"></i> <strong>Sending Request. Window will close when finished.</strong></div>
                </div>
            </div>
        </div>
    </div>
</div> 
<input type=hidden id="pageSize" value="-1"></input> 

@section pageplugins{
    @if (Request.IsSecureConnection)
    {
        <script src="https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js" type="text/javascript"></script>
    }
    else
    {
        <script src="http://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js" type="text/javascript"></script>
    }
}
@section scripts{

    <script type="text/javascript">
        var openInvoicesTable;
        var vendorData = [];
        var jsonVendorData = "";
        var amountToPay = 0;
        var subTotalGrossPay;
        var grandTotalGrossPay;

        var payTotals = {
            amount: 0,
            vendors: 0,
            invoices: []
        };

        /*
         * Proxy object to handle relevant page events - German Sosa 10/2/2018
         */
        var payTotalsHandler = {
            set: function(target, key, value) {
                if (key === 'amount') {
                    document.querySelector('#amountToPay').textContent = formatCurrency(value, true);
                    document.querySelector('#totalToPay').textContent = formatCurrency(value, true);
                    target[key] = value;
                }
                if (key === 'invoices') {
                    target[key].push(value);
                }
            }
        };
        
        var payTotalsProxy = new Proxy(payTotals, payTotalsHandler);
        payTotalsProxy.amount = 0;

        /*
         * Brings up modal form to request payment or message if does not meet requirements - German Sosa 10/2/2018
         */
        function requestPayment(id) {
            if (parseFloat(payTotalsProxy.amount) === 0) {
                swal({
                    title: "Information",
                    text: "At least one invoice selection is required before you send this request.",
                    type: "info",
                    showCancelButton: false
                });

            } else {
                $("#modalRequestPay").modal({ backdrop: 'static' });
            }
        }

        /*
         * Remove crappy CSS - German Sosa 10/2/2018
         */
        document.addEventListener('DOMContentLoaded',
            function() {
                document.querySelector('#inputSearch').onkeyup = changeEventHandler;
                document.querySelector('#selectVendorList').onchange = changeEventHandler;
//                document.querySelector('link[href="/Content/admin/assets/layouts/layout2/css/custom.css"]').disabled =
//                    true;
//                document.querySelector('link[href="/Content/admin/assets/layouts/layout2/css/custom.css"]').remove();
                $('#inputSearch').focus();
            });

        initDataTable();

        $('.modal-dialog').draggable();
        $('#tblVendorList').show();
        $('#divtblVendorList').show();

        /*
         * Proxy event handlers - German Sosa 10/2/2018
         */
        function changeEventHandler(event) {
            switch (event.target.id) {
            case "inputSearch":
                openInvoicesTable.search(this.value).draw();
                break;
            case "selectVendorList":
                openInvoicesTable.search(this.value).draw();
                break;
            };
        }

        /*
         * Selects all invoice checkboxes when the main table checkbox all is clicked
         * German Sosa 10/2/2018
         */
        function SelectAllVendorInvoices(checkboxObject) {
            var allVendorHeaderCheckboxes = document.querySelectorAll('.vendorHeaderCheckbox');
            allVendorHeaderCheckboxes.forEach((element) => {
                element.checked = checkboxObject.checked;
            });
//            var jsonVendor = String(checkboxObject.value);
            var checkboxesVendor = document.querySelectorAll('.allOpenInvoices');
            checkboxesVendor.forEach((element) => {
                if (checkboxObject.checked !== element.checked) {
                    element.checked = checkboxObject.checked;
                    var jsonVendor = String(element.value);
                    jsonVendor = jsonVendor.replace(/[|]/g, '"').replace(/[=]/g, "'");
                    let vendor = JSON.parse(jsonVendor);
                    payTotalsProxy.amount = (checkboxObject.checked
                        ? (element.checked === true
                            ? (payTotals.amount += vendor.GrossDueAmt)
                            : (payTotals.amount -= vendor.GrossDueAmt))
                        : 0);
                    vinv = {
                        VendorID: vendor.VendorID,
                        VendorName: vendor.VendorName,
                        InvoiceNum: vendor.InvoiceNum,
                        GrossDueAmt: vendor.GrossDueAmt
                    }
                    payTotalsProxy.invoices = vinv;
                }
            });
        }

        /*
         * Selects/checks individual vendor invoice checkboxes when the Vendor group/header checkbox is clicked
         * German Sosa 10/2/2018
         */
        function SelectVendorSpecificInvoices(checkboxObject) {
            var allVendorHeaderCheckboxes = document.querySelectorAll('.vendorHeaderCheckbox');

            var jsonVendor = String(checkboxObject.value);
            jsonVendor = jsonVendor.replace(/[|]/g, '"').replace(/[=]/g, "'");
            var vendor = JSON.parse(jsonVendor);
            let checkboxesVendor = document.querySelectorAll('[rel="' + vendor.VendorID + '"]');

            checkboxesVendor.forEach((element, index) => {
                element.checked = checkboxObject.checked;
                let jsonVendor = String(element.value);
                jsonVendor = jsonVendor.replace(/[|]/g, '"').replace(/[=]/g, "'");
                let vendor = JSON.parse(jsonVendor);
                payTotalsProxy.amount = (element.checked === true
                    ? (payTotals.amount += vendor.GrossDueAmt)
                    : (payTotals.amount -= vendor.GrossDueAmt));
                vinv = {
                    VendorID: vendor.VendorID,
                    VendorName: vendor.VendorName,
                    InvoiceNum: vendor.InvoiceNum,
                    GrossDueAmt: vendor.GrossDueAmt
                }
                payTotalsProxy.invoices = vinv;
            });
        }

        /*
         * Selects/checks individual vendor invoice checkbox is clicked
         * German Sosa 10/2/2018
         */
        function SelectInvoice(checkboxObject) {
            var jsonVendor = String(checkboxObject.value);
            jsonVendor = jsonVendor.replace(/[|]/g, '"').replace(/[=]/g, "'");
            let vendor = JSON.parse(jsonVendor);
            payTotalsProxy.amount = (checkboxObject.checked === true
                ? (payTotals.amount += vendor.GrossDueAmt)
                : (payTotals.amount -= vendor.GrossDueAmt));
            vinv = {
                VendorID: vendor.VendorID,
                VendorName: vendor.VendorName,
                InvoiceNum: vendor.InvoiceNum,
                GrossDueAmt: vendor.GrossDueAmt
            }
            payTotalsProxy.invoices = vinv;
        }

        /*
         * POS jQuery Why?? We are in 2018! - German Sosa 10/2/2018
         * DataTable to draw dynamic table...like in the 90s LOL
         * Get rid of jQuery!
        */
        function initDataTable() {
            var selectedRegion = '@ViewBag.selectedRegionId';
            var d = new Date();
            var todaysDate = d.getMonth().toString() +
                '/' +
                d.getDate().toString() +
                '/' +
                d.getFullYear().toString();
            var ps = document.querySelector('#pageSize').value;

            var sURL =
                '@Url.Action("GetTROpenInvoices", "Company", new {area = "Portal"})?fromDate=1/1/1900&toDate=11/30/2018&regionId=' +
                    selectedRegion;
            var groupColumn = 0;
            openInvoicesTable = $('#tblVendorList').DataTable({
                "bAutoWidth": false,
                "cache": false,
                "ordering": true,
                "iDisplayLength": ps === '-1' ? 100 : ps,
                "dom": "<'table-responsive't><'bottom'ip><'clear'>",
                "ajax": {
                    "url": sURL,
                    "dataSrc": function(json) {
                        return json.returnedData;
                    },
                    "deferRender": true
                },
                "columns": [
                    {
                        "data": "VendorID",
                        "sortable": false,
                        "visible": false
                    },
                    {
                        "data": "InvoiceNum",
                        "render": function(data, type, full) {
                            let vendorData = full;
                            jsonVendorData = JSON.stringify(vendorData).replace(/[']/g, "=").replace(/["]/g, "|");
                            return '<input type="checkbox" name="chkSelect' +
                                full.InvoiceNum +
                                '" class="allOpenInvoices" id="chkSelect' +
                                full.InvoiceNum +
                                '" data-vendorid="' +
                                full.VendorID +
                                '"' +
                                ' onchange="SelectInvoice(this)" rel="' +
                                full.VendorID +
                                '" value="' +
                                jsonVendorData +
                                '">';
                        },
                        "class": "text-center",
                        "sortable": false
                    },
                    {
                        "data": "VendorName",
                        "render": function(data, type, full) {
                            return full.VendorID + ' - ' + full.VendorName;
                        },
                        "sortable": false
                    },
                    {
                        "data": "InvoiceNum",
                        "render": function(data, type, full) {
                            return full.InvoiceNum;
                        },
                        "class": "text-center",
                        "sortable": false
                    },
                    {
                        "data": "DiscDueDate",
                        "render": function(data, type, full) {
                            var date = formatJSONDateUtc(full.DiscDueDate);
                            return date;
                        },
                        "class": "text-center",
                        "sortable": true
                    },
                    {
                        "data": "NetDueDate",
                        "render": function(data, type, full) {
                            var date = formatJSONDateUtc(full.NetDueDate);
                            return date;
                        },
                        "class": "text-center",
                        "sortable": true
                    },
                    {
                        "data": "GrossDueAmt",
                        "render": function(data, type, full) {
                            var amount = formatCurrency(full.GrossDueAmt, true);
                            return amount;
                        },
                        "class": "text-right",
                        "sortable": false
                    }
                ],
                "drawCallback": function (settings) {
                    var api = this.api();
                    var rows = api.rows({ page: 'current' }).nodes();
                    var myData = api.rows({ page: 'current' }).data();
                    var last = null;
                    var grandTotalGrossPay = 0.00;
                    var vendorTotalGrossPay = 0.00;
                    var vendorCount = 0;
                    var vendorData = [];

                    api.column(groupColumn, { page: 'current' }).data().each(function (group, i) {
                        if (last !== group) {
                            vendorData = myData[i];
                            jsonVendorData = JSON.stringify(vendorData).replace(/[']/g, "=").replace(/["]/g, "|");

                            if (last != null) {
                                $(rows).eq(i).before(
                                       '<tr class="group" style="font-weight:bold">' +
                                           '<td colspan="5" >' + 'Total' + '</td>' +
                                           '<td style="text-align:right;">' + formatCurrency(parseFloat(vendorTotalGrossPay), true) + '</td>' +
                                       '</tr>'
                                   );
                            }

                            $(rows).eq(i).before(

                                '<tr class="group"><td colspan="7" ><input type="checkbox" id="checkboxVendor_' +
                                vendorData.VendorID +
                                '" onclick="SelectVendorSpecificInvoices(this);" value="' +
                                jsonVendorData +
                                '" style="margin-left: 15px;" class="vendorHeaderCheckbox" /><span><strong>' +
                                vendorData.VendorName +
                                '</strong></span></td></tr>');

                            last = group;
                            vendorTotalGrossPay = 0.00;
                            grandTotalGrossPay = 0.00;
                        }

                        grandTotalGrossPay += parseFloat(vendorData.GrossDueAmt);
                        vendorTotalGrossPay = parseFloat(vendorData.GrossDue);
                        vendorCount = parseInt(vendorCount) + 1;

                        if (myData.count() == vendorCount) {
                            $(rows).eq(i).before(
                                      '<tr class="group" style="font-weight:bold">' +
                                          '<td colspan="5" >' + 'Total' + '</td>' +
                                          '<td style="text-align:right;">' + formatCurrency(parseFloat(vendorTotalGrossPay), true) + '</td>' +
                                      '</tr>'
                                  );
                        }

                    });
                },
                "rowCallback": function(row, data, full) {
                },
                "initComplete": function(settings, json) {
                }
            });
        }

        /*
         * Triggered when the modal form is opened  - German Sosa 10/2/2018
        */
        $('#modalRequestPay').on('shown.bs.modal',
            function(e) {
                document.querySelector('#btnSendEmail').disabled = false;
                var checkboxesVendor = document.querySelectorAll('.allOpenInvoices');
                let innerHTMLContent = '';
                let innerHTMLContentTableHeader =
                    '<table class="table table-responsive table-stripped"><thead><tr>' +
                        '<th class="col-md-5 text-left"><strong>Vendor</strong></th>' +
                        '<th class="col-md-2 text-center"><strong>Invoice Number</strong></th>' +
                        '<th class="col-md-2 text-center"><strong>Due Date</strong></th>' +
                        '<th class="col-md-2 text-right"><strong>Amount</strong></th>' +
                        '</tr></thead>';

                checkboxesVendor.forEach((element, index) => {
                    if (element.checked) {
                        var jsonVendor = String(element.value);
                        jsonVendor = jsonVendor.replace(/[|]/g, '"').replace(/[=]/g, "'");
                        var vendor = JSON.parse(jsonVendor);

                        innerHTMLContent += '<tr>' +
                            '<td class="col-md-5 text-left">' +
                            vendor.VendorName +
                            '</td>' +
                            '<td class="col-md-2 text-center">' +
                            vendor.InvoiceNum +
                            '</td>' +
                            '<td class="col-md-2 text-center">' +
                            formatJSONDateUtc(vendor.NetDueDate) +
                            '</td>' +
                            '<td class="col-md-2 text-right">' +
                            formatCurrency(vendor.GrossDueAmt, true) +
                            '</td></tr>';
                    }

                    var innerContent = innerHTMLContentTableHeader + innerHTMLContent + '</table>';

                    $('#vendorInvoiceList').html(innerContent);
                });
                $('#txtEmailBody').focus();
            });

        function sendRequestToPayEmail() {
            document.querySelector('#processingMsg').classList.remove('hidden');
            document.querySelector('#btnSendEmail').disabled = true;

            var mailData = {
                from: 'fms@janiking.com',
                to: document.querySelector('#txtToEmail').value,
                cc: document.querySelector('#txtCcEmail').value,
                subject: document.querySelector('#txtSubjectEmail').value.replace(',', ';'),
                body: document.querySelector('#txtEmailBody').value,
                invoices: '{ "invoices" : payTotals.invoices }'
            };
//            let sURL = '@Url.Action("SendAnEmail", "Company", new {area = "Portal"})';
            let sURL = '@Url.Action("SendAnEmail", "Company", new {area = "Portal"})?to=' +
                mailData.to +
                '&body=' +
                mailData.body +
                '&subject=' +
                mailData.subject +
                '&cc=' +
                mailData.cc +
                '&invoices=' +
                JSON.stringify(payTotals.invoices);
            fetch(sURL)
                .then(function(callResponse) {
                    if (callResponse.status === 200) {
                        document.querySelector('#processingMsg').classList.add('hidden');
                        payTotalsProxy.amount = 0;
                        document.querySelector('#chkSelectAll').checked = false;
                        var checkboxesAll = document.querySelectorAll("input[type='checkbox']:checked");
                        checkboxesAll.forEach((element) => {
                            element.checked = false;
                        });
                        $("#modalRequestPay").modal('hide');
                    }
                }).catch(function(error) {
                });
        }

        //TODO: Move below javascript function to a file and include when necessary - German Sosa
        /*
         * The following functions should be on a main utilities class/file and we need to use webpack - German Sosa
         * For now, I'll leave them here, but they have to be moved.
         */
        function formatJSONDateUtc(jsonDate) {
            if (jsonDate != null) {
                var dtstr = jsonDate.substr(6);
                var dateString = dtstr.substring(0, dtstr.length - 2);
                var currentTime = new Date(parseInt(dateString));
                var date = moment.utc(currentTime).format("MM/DD/YYYY");
                return date;
            }
            return null;
        }

        function formatCurrency(total, dollar) {
            dollar = (dollar == true ? true : false);
            var neg = false;
            if (total < 0) {
                neg = true;
                total = Math.abs(total);
            }
            return (neg ? "-" : '') +
                (dollar ? "$" : "") +
                parseFloat(total, 10).toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,").toString();
        };

    </script>
}